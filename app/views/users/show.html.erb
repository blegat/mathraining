<% mt_theme = (cookies.has_key?(:dark_theme) ? 'dark' : 'light') %>

<% provide(:title, @user.name) %>

<% if !@user.admin? %>
  <% actualrating = @user.rating %>
  <% if actualrating > 0 %>
    <% rank = User.where(:role => :student).where("rating > ?", actualrating).count + 1 %>
    <% num_users = Globalstatistic.get.nb_ranked_users %>
    <% rank_centile = (rank == 1 ? 100 : (100.0 * (num_users - rank + 1) / num_users).round(1)) %>
  <% end %>
  <% niveau = @user.level %>
  <% grade = (@user.sex == 0 ? niveau[:name] : niveau[:femininename]) %>
  <% user_color_light = niveau[:color] %>
  <% user_color_dark = niveau[:dark_color] %>
<% else %>
  <% grade = (@user.sex == 0 ? "Administrateur" : "Administratrice") %>
  <% user_color_light = "black" %>
  <% user_color_dark = "white" %>
<% end %>

<% if !@user.admin? %>

  <!-- On détermine ce que la personne peut voir ou ne pas voir -->
  
  <% non_accessible_chapters_set = non_accessible_chapters_ids(current_user) %>
  <% non_accessible_problems_set = non_accessible_problems_ids(current_user) %>
  
  <!-- On va parcourir tous les exercices et problèmes -->
  
  <% questions = @user.solvedquestions.joins(question: :chapter).select("solvedquestions.question_id AS id, solvedquestions.resolution_time AS time, questions.level AS level, questions.chapter_id AS chapter_id, chapters.name AS chapter_name").order("resolution_time DESC").to_a %>

  <% problems = @user.solvedproblems.joins(:problem).select("solvedproblems.problem_id AS id, solvedproblems.resolution_time AS time, solvedproblems.submission_id AS submission_id, problems.level AS level, problems.number AS number, problems.virtualtest_id AS virtualtest_id, problems.section_id AS section_id").order("resolution_time DESC").to_a %>

  <% act = Array.new %>
  <% q_encours = 0 %>
  <% p_encours = 0 %>

  <% nb_q = 0 %>
  <% nb_p = 0 %>
  
  <% numberexo = Question.where("level > 0 AND online = ?", true).count %>
  <% numberpb = Problem.where("online = ?", true).count %>

  <% premier = nil %>
  <% dernier = nil %>

  <% (1..(questions.size+problems.size)).each do |i| %>
    <% trouve = false %>
    <% besttime = 0 %>
    <% bestqui = "" %>
    <% if q_encours < questions.size && (!trouve || questions[q_encours].time.to_time.to_i > besttime) %>
      <% besttime = questions[q_encours].time.to_time.to_i %>
      <% trouve = true %>
      <% bestqui = "Q" %>
    <% end %>
    <% if p_encours < problems.size && (!trouve || problems[p_encours].time.to_time.to_i > besttime) %>
      <% besttime = problems[p_encours].time.to_time.to_i %>
      <% trouve = true %>
      <% bestqui = "P" %>
    <% end %>
    <% if bestqui == "Q" %>
      <% q = questions[q_encours] %>
      <% if q.level > 0 %>
        <% nb_q = nb_q+1 %>
        <% dernier = q.time.in_time_zone %>
        <% if premier.nil? %>
          <% premier = q.time.in_time_zone %>
        <% end %>
      <% end %>
      <% peutvoir = !non_accessible_chapters_set.include?(q.chapter_id) %>
      <% q_encours = q_encours + 1 %>
      <% act.push({:time => q.time, :type => "Q", :id => q.id, :peutvoir => peutvoir, :pt => 3 * q.level, :chapter_name => q.chapter_name, :chapter_id => q.chapter_id}) %>
    <% elsif bestqui == "P" %>
      <% p = problems[p_encours] %>
      <% nb_p = nb_p+1 %>
      <% dernier = p.time.in_time_zone %>
      <% if premier.nil? %>
        <% premier = p.time.in_time_zone %>
      <% end %>
      <% peutvoir = non_accessible_problems_set != "all" && !non_accessible_problems_set.include?(p.id) %>
      <% p_encours = p_encours + 1 %>
      <% act.push({:time => p.time, :type => "P", :id => p.id, :sub => p.submission_id, :peutvoir => peutvoir, :pt => 15 * p.level, :number => p.number, :section_id => p.section_id}) %>
    <% end %>
  <% end %>
  
  <% ratio_solved_exo = numberexo == 0 ? 0 : nb_q / numberexo.to_f %>
  <% ratio_solved_pb = numberpb == 0 ? 0 : nb_p / numberpb.to_f %>
  
<% end %>

<!-- OPEN OF THE MAIN DIV -->
<div class="grid mx-0 mb-3 pt-1" style="--bs-columns:12; --bs-gap:10px;">

<% largeur = (@user.admin? ? 12 : 5) %>
<% can_send_message = true %>
<% if !signed_in? || @user == current_user %>
  <% can_send_message = false %>
<% end %>
<div class="g-col-12 g-col-lg-<%= largeur %> basic_container text-center p-1">
  <table class="m-0 my-2 p-0" style="width:100%; height:100px;">
  <tr><td class="px-2" style="font-size:20px;"><%= @user.colored_name %></td></tr>
  <tr><td class="pt-1 fw-bold" style="font-size:16px;"><%= grade %>
  <% if signed_in? && current_user.root? %>
    <% if @user.has_sanction_of_type(:ban) %>
      <span class='text-color-red'>(<%= write_date_only_small(@user.last_sanction_of_type(:ban).end_time) %>)</span>
    <% elsif @user.has_sanction_of_type(:no_submission) %>
      <span class='text-color-orange'>(<%= write_date_only_small(@user.last_sanction_of_type(:no_submission).end_time) %>)</span>
    <% elsif @user.has_sanction_of_type(:not_corrected) %>
      <span class='text-color-orange'>(<%= write_date_only_small(@user.last_sanction_of_type(:not_corrected).end_time) %>)</span>
    <% end %>
  <% end %>
  </td></tr>
  <tr><td class="pt-2"><%= @user.country.name %>
  <%= image_tag "countries/" + @user.country.code + ".png", :title => @user.country.name, :height => "15px;", :class => "ps-1", :style => "margin-top:-2px;" %></td></tr>
  </table>
  <% if signed_in? && current_user != @user %>
    <%= link_to "Envoyer un message", new_discussion_path(:qui => @user), :class => "btn btn-ld-light-dark mt-1 mb-2", :style => "width:170px;", :disabled => !signed_in? %>
  <% end %> 
</div>
  
<% if !@user.admin? %>
  <div class="g-col-12 g-col-sm-6 g-col-lg-3 basic_container text-center p-1">
    <table class="m-0 my-2 p-0" style="width:100%; height:100px;">
      <tr>
      <td class="mytitle">Score</td>
      <td class="myvalue <%= @user.color_class %>"><%= write_readable_big_number(actualrating) %></td>
      </tr>
      
      <tr>
      <td class="mytitle">Rang</td>
      <td class="myvalue <%= @user.color_class %>"><%= write_readable_big_number(rank) if actualrating > 0 %><%= "-" if actualrating == 0 %></td>
      </tr>
        
      <tr>
      <td class="mytitle">Centile</td>
      <td class="myvalue <%= @user.color_class %>"><%= "#{rank_centile}%" if actualrating > 0 %><%= "-" if actualrating == 0 %></td>
      </tr>
    </table>
    
    <% if signed_in? && @user != current_user %>
      <% if !current_user.followed_users.exists?(@user.id) %>
        <%= link_to "Suivre", follow_user_path(@user), :method => :put, :class => "btn btn-ld-light-dark mt-1 mb-2 #{'disabled' if in_skin?}", :style => "width:140px;" %>
      <% else %>
        <%= link_to "Ne plus suivre", unfollow_user_path(@user), :method => :put, :class => "btn btn-ld-light-dark mt-1 mb-2 #{'disabled' if in_skin?}", :style => "width:140px;" %>
      <% end %>
    <% end %>
  </div>
<% end %>
  
<% if !@user.admin? %>
  <div class="g-col-12 g-col-sm-6 g-col-lg-4 basic_container text-center p-1">
    
    <% espace = (can_send_message ? "32px" : "8px") %>
    <div style="width:100%; height:<%= espace %>" class="d-none d-sm-block"></div>
    <table class="my-2" style="width:90%; margin-left:5%; margin-right:5%;">
    <tr>
    <td class="text-center pt-1" style="width:25%;"><%= image_tag("Gold.svg", height: 40, alt: "Médailles d'or", title: "Médailles d'or") %></td>
    <td class="text-center pt-1" style="width:25%;"><%= image_tag("Silver.svg", height: 40, alt: "Médailles d'argent", title: "Médailles d'argent") %></td>
    <td class="text-center pt-1" style="width:25%;"><%= image_tag("Bronze.svg", height: 40, alt: "Médailles de bronze", title: "Médailles de bronze") %></td>
    <td class="text-center pt-1" style="width:25%;"><%= image_tag("MH.svg", height: 34, alt: "Mentions honorables", title: "Mentions honorables", style: "margin-top:5px;") %></td>
    </tr>
    <tr>
    <% num_medals = @user.contestscores.group(:medal).count %>
    <% ["gold_medal", "silver_medal", "bronze_medal", "honourable_mention"].each do |m| %>
      <td class="text-center pt-1 fw-bold <%= @user.color_class %>" style="font-size:22px;">
      <%= num_medals.key?(m) ? num_medals[m] : "-" %>
      </td>
    <% end %>
    </tr>
    </table>
      
  </div>
<% end %> 
  
<% if signed_in? && current_user.root? %>
  <div class="g-col-12 g-col-md-6 g-col-lg-3 basic_container text-center p-1">
    Connecté le <span class="<%= @user.color_class %>"><%= write_date_only_small(@user.last_connexion_date) %></span>
  </div>
  
  <div class="g-col-12 g-col-md-6 g-col-lg-3 basic_container text-center p-1">
    <span class="<%= @user.color_class %>"><%= "(" if !@user.email_confirm %><%= @user.email %><%= ")" if !@user.email_confirm %></span>
  </div>
  
  <div class="g-col-12 g-col-md-6 g-col-lg-3 basic_container text-center p-1">
    Né en <span class="<%= @user.color_class %>"><%= @user.year %></span>
  </div>
  
  <div class="g-col-12 g-col-md-6 g-col-lg-3 basic_container text-center p-1">
    <% if @user.wepion? %>
      <%= "Groupe Wépion" %> <%= " (" << @user.group << ")" if @user.group != "" %>
    <% else %>
      Non Wépion
    <% end %>
  </div>
<% end %>

<% if !@user.admin? %>
  <!-- Style pour les progress bar circulaires -->
  <style type="text/css">

    <% arcgrey_light = "#e9ecef" %>
    <% arcgrey_dark = "#343a40" %>

    <% stroke_width = 8 %>
    <% radius = 50 - stroke_width / 2 %>
    <% circumference = Math::PI * radius * 2 %>

    .circle {
      fill: none;
      stroke-width: <%= stroke_width %>px;
      cx: 50%;
      cy: 50%;
      r: <%= radius %>%;
    }

    .circle.exo {
      stroke-dasharray: <%= ratio_solved_exo * circumference %>% <%= circumference * (1 - ratio_solved_exo) %>%;
      stroke-dashoffset: <%= circumference / 4 %>%;
    }

    .circle.pb {
      stroke-dasharray: <%= ratio_solved_pb * circumference %>% <%= circumference * (1 - ratio_solved_pb) %>%;
      stroke-dashoffset: <%= circumference / 4 %>%;
    }

    .mt_light.circle_progress {
      stroke: <%= user_color_light %>;
    }
    
    .mt_dark.circle_progress {
      stroke: <%= user_color_dark %>;
    }

    .mt_light.circle_bg {
      stroke: <%= arcgrey_light %>;
    }

    .mt_dark.circle_bg {
      stroke: <%= arcgrey_dark %>;
    }
  </style>

  <!-- Exercices -->
  <div class="g-col-6 g-col-md-3 basic_container p-1">
    <table class="progress_container">
    <tr><td class="progress_title">Exercices</td></tr>
    <tr><td class="progress_circle">
    <div class="wrapper">
      <svg width="100" height="100">
        <circle class="circle <%= "mt_#{mt_theme}" %> circle_bg"/>
       <% if nb_q > 0 %>
         <circle class="circle <%= "mt_#{mt_theme}" %> circle_progress exo"/>
       <% end %>
      </svg>
      <div class="progress_nb"><%= nb_q %></div>
      <div class="progress_pct">/ <%= numberexo %></div>
    </div>
    </td></tr>
    </table>
  </div>
  
  <!-- Problèmes -->
  <div class="g-col-6 g-col-md-3 basic_container p-1">
    <table class="progress_container">
    <tr><td class="progress_title">Problèmes</td></tr>
    <tr><td class="progress_circle">
    <div class="wrapper">
      <svg width="100" height="100">
        <circle class="circle <%= "mt_#{mt_theme}" %> circle_bg"/>
        <% if nb_p > 0 %> 
          <circle class="circle <%= "mt_#{mt_theme}" %> circle_progress pb"/>
        <% end %>
      </svg>
      <div class="progress_nb"><%= nb_p %></div>
      <div class="progress_pct">/ <%= numberpb %></div>
    </div>
    </td></tr>
    </table>
  </div>
  
  <!-- Style pour les progress bar horizontales -->
  <style type="text/css">
    .mt_light.progress-bar {
      background-color: <%= user_color_light %>;
    }
    
    .mt_dark.progress-bar {
      background-color: <%= user_color_dark %>;
    }
  </style>
  
  <!-- Progression par section -->
  <div class="g-col-12 g-col-md-6 g-col-lg-6 basic_container p-1 px-3">
    <% ppersection_dic = {} %>
    <% ppersection = Pointspersection.where(:user_id => @user).all.each do |pp| %>
      <% ppersection_dic[pp.section_id] = pp.points %>
    <% end %>
    <table class="progress-table">
    
    <% allsec_name = Array.new %>
    <% Section.order(:id).where(:fondation => false).each do |s| %>
      <% allsec_name[s.id] = s.name %>
      <tr>
      <td style="width:170px;"><%= s.name %></td>
        <% rate = ppersection_dic[s.id] %>
      <td class="px-1">
        <% pct = s.max_score == 0 ? 0 : 100*rate/s.max_score.to_f %>
        <div class="progress mb-0" style="height:10px;">
        <div class="progress-bar <%= "mt_#{mt_theme}" %>" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="width:<%= pct %>%;">
        </div>
        </div>
      </td>
      <td class="ps-1 fw-bold" style="width:40px;">
        <%= pct.floor %>%
      </td>
      </tr>
    <% end %>
    </table>
  </div>
  
  <!-- Résolutions -->
  <div class="g-col-12 g-col-xl-6 basic_container p-1">
    <div class="container_title">Résolutions</div>
    <div class="resolution_container_table">
    
    <% actperday = Array.new %>
     <% previousdate = Date.new(1980,1,1) %>
    <% encours = -1 %>

    <% parquoi = "" %>

    <!-- Si l'étudiant a déjà fait au moins un truc -->
    <% if act.size > 0 %>

      <!-- On détermine si on rassemble les actes par minute, heure ou jour -->
      <% if !premier.nil? %>
        <% date_now = DateTime.now.in_time_zone %>
        <% if dernier.day != date_now.day || dernier.month != date_now.month || dernier.year != date_now.year %>
          <% parquoi = "jour" %>
        <% elsif dernier.hour < premier.hour - 1 %>
          <% parquoi = "heure" %>
        <% else %>
          <% parquoi = "minute" %>
        <% end %>
      <% end %>

      <!-- Début du tableau des résolutions -->
      <table class="table middle_aligned my-0" style="width:100%;">

      <!-- On parcourt les actes un par un -->
      <% numact = 0 %>
      <% act.each do |a| %>
        <% numact += 1 %>
        <% date = a[:time].in_time_zone %>
        <% if parquoi == "jour" %>
          <% dateday = Time.zone.local(date.year, date.month, date.day, 0, 0, 0) %>
        <% elsif parquoi == "heure" %>
          <% dateday = Time.zone.local(date.year, date.month, date.day, date.hour, 0, 0) %>
        <% else %>
          <% dateday = Time.zone.local(date.year, date.month, date.day, date.hour, date.min, 0) %>
        <% end %>
        <% if a[:pt] > 0 %>
          <% if dateday != previousdate %>
            <% encours = encours+1 %>
            <% actperday.push({:time => dateday, :pt => a[:pt]}) %>
          <% else %>
            <% actperday[encours][:pt] = actperday[encours][:pt] + a[:pt] %>
          <% end %>
          <% previousdate = dateday %>
        <% end %>
        <tr>
        <% remove_border = "" %>
        <% if numact == 1 %>
          <% remove_border = "border-top:0px;" %>
        <% end %>
        <% if numact == act.size %>
          <% remove_border += "border-bottom:0px;" %>
        <% end %>
        <td class="text-center fw-bold <%= @user.color_class %>" style="width:50px; <%= remove_border %>"><%= "+ #{a[:pt]}" if a[:pt] > 0 %></td>
        <td class="text-center" style="width:75px; <%= remove_border %>"><%= write_date_only_small(date) %><span class="d-inline d-md-none"><br/><%= write_hour(date) %></span></td>
        <td class="d-none d-md-table-cell text-center" style="width:60px; <%= remove_border %>"><%= write_hour(date) %></td>
        <td style="<%= remove_border %>">
        <% if a[:type] == "Q" %>
          <% if a[:peutvoir] %>
            <%= link_to "Exercice", chapter_question_path(a[:chapter_id], a[:id]) %>
          <% else %>
            Exercice
          <% end %>
          - <%= a[:chapter_name] %>
        <% elsif a[:type] == "P" %>
          <% if a[:peutvoir] %>
            <%= link_to "Problème ##{a[:number]}", problem_path(a[:id], :sub => a[:sub]) %>
          <% else %>
            Problème #<%= a[:number] %>
          <% end %>
           - <%= allsec_name[a[:section_id]] %>
        <% end %>
        </td>
        </tr>
      <% end %>
      
      </table>
    <% else %>
      <div class="pe-2 pb-2" style="padding-left:10px;"><%= @user.name %> n'a résolu aucun exercice ou problème.</div>
    <% end %>
    
    </div>
  </div>
    
  <!-- Concours -->
  <div class="g-col-12 g-col-xl-6 basic_container p-1">
    <div class="container_title">Concours</div>
    <div class="resolution_container_table">
    
    <% actcontest = Array.new %>
    <% @user.contestscores.includes(:contest).each do |cs| %>
      <% contest = cs.contest %>
      <% if contest.completed? %>
        <% start_time = contest.start_time %>
        <% end_time = contest.end_time %>
        <% num_participants = contest.num_participants %>
        <% num_problems = contest.num_problems %>
        <% ranking = cs.rank %>
        <% medal = cs.medal %>
        <% actcontest.push({:number => contest.number, :id => contest.id, :start_time => start_time, :end_time => end_time, :num_participants => num_participants, :ranking => ranking, :medal => medal, :score => cs.score, :max_score => num_problems * 7}) %>
      <% end %>
    <% end %>
    
    <% @user.organized_contests.where(:status => :completed).each do |contest| %>
      <% start_time = contest.start_time %>
      <% end_time = contest.end_time %>
      <% num_participants = contest.num_participants %>
      <% actcontest.push({:number => contest.number, :id => contest.id, :start_time => start_time, :end_time => end_time, :num_participants => num_participants, :ranking => -1, :medal => "undefined_medal", :score => -1, :max_score => -1}) %>
    <% end %>
    
    <% actcontest.sort_by! { |ac| -ac[:number] } %>
    
    <% if actcontest.size > 0 %>
    
      <!-- Début du tableau des concours -->
      <table class="table middle_aligned mb-0" style="width:100%;">
      <% numact = 0 %>
      <% actcontest.each do |ac| %>
        <% numact += 1 %>
        <tr>
        <% remove_border = "" %>
        <% if numact == 1 %>
          <% remove_border = "border-top:0px;" %>
        <% end %>
        <% if numact == actcontest.size %>
          <% remove_border += "border-bottom:0px;" %>
        <% end %>
        <% if ac[:max_score] < 0 %>
          <!-- Concours organisé -->
          <td class="text-center" style="width:190px; <%= remove_border %>" colspan="3"><span class="fw-bold <%= @user.color_class %>">Organisateur</span></td>
        <% else %>
          <!-- Médaille -->
          <td class="p-0 text-center" style="width:35px; <%= remove_border %>">
          <%= image_tag("Gold.svg", height: 20, alt: "Médaille d'or", title: "Médaille d'or") if ac[:medal] == "gold_medal" %>
          <%= image_tag("Silver.svg", height: 20, alt: "Médaille d'argent", title: "Médaille d'argent") if ac[:medal] == "silver_medal" %>
          <%= image_tag("Bronze.svg", height: 20, alt: "Médaille de bronze", title: "Médaille de bronze") if ac[:medal] == "bronze_medal" %>
          <%= image_tag("MH.svg", height: 20, alt: "Mention honorable", title: "Mention honorable") if ac[:medal] == "honourable_mention" %>
          <%= "-" if ac[:medal] == "no_medal" || ac[:medal] == "undefined_medal" %>
          </td>
          <td class="d-none d-sm-table-cell text-center" style="width:90px; <%= remove_border %>">
          <span class="fw-bold <%= @user.color_class %>"><%= ac[:ranking] %><sup><%= ac[:ranking] == 1 ? "er" : "e" %></sup></span> / <%= ac[:num_participants] %>
          </td>
          <td class="d-none d-sm-table-cell text-center" style="width:100px; <%= remove_border %>">
          <span class="fw-bold <%= @user.color_class %>"><%= ac[:score] %> pt<%= "s" if ac[:score] > 1 %></span> / <%= ac[:max_score] %>
          </td>
          <td class="d-table-cell d-sm-none text-center" style="width:100px; <%= remove_border %>">
          <span class="fw-bold <%= @user.color_class %>"><%= ac[:ranking] %><sup><%= ac[:ranking] == 1 ? "er" : "e" %></sup></span> / <%= ac[:num_participants] %><br/>
          <span class="fw-bold <%= @user.color_class %>"><%= ac[:score] %> pt<%= "s" if ac[:score] > 1 %></span> / <%= ac[:max_score] %>
          </td>
          <td class="d-table-cell d-sm-none" style="width:0px;"></td>
        <% end %>
        <td class="d-none d-sm-table-cell text-center" style="width:150px; <%= remove_border %>"><%= write_date_only_small(ac[:start_time]) %> - <%= write_date_only_small(ac[:end_time]) %></td>
        <td class="text-start" style="<%= remove_border %>;"><%= link_to "Concours ##{ac[:number]}", contest_path(ac[:id], :tab => 1) %></td>
        </tr>
      <% end %>
      </table>
    <% else %>
      <div class="pe-2 pb-2" style="padding-left:10px;"><%= @user.name %> n'a participé à aucun concours.</div>
    <% end %>
    </div>
  </div>


  <!-- Évolution de l'étudiant -->
  <div class="g-col-12 basic_container p-1">
  <div class="container_title">Évolution</div>
    
  <div class="pe-2 pb-2" style="padding-left:20px;">
    <%= @user.name %> s'est inscrit<%= "e" if @user.sex == 1 %> sur Mathraining le <span class="<%= @user.color_class %>"><%= write_date_only(@user.created_at) %></span>.
    <% if nb_p >= 3 %>
      <% followings = Following.includes(:user).where(:submission_user => @user, :kind => [:first_corrector, :other_corrector]).group(:user_id).select("count(id) AS num_corrections, user_id").order("num_corrections DESC, user_id ASC").to_a %>
      <% if followings.size > 0 %>
        <% tot_num_corr = followings.sum{|f| f.num_corrections} %>
        <% num_correctors_to_show = [3, followings.size].min %>
        <% while num_correctors_to_show < followings.size && followings[num_correctors_to_show-1].num_corrections == followings[num_correctors_to_show].num_corrections %>
          <% num_correctors_to_show += 1 %>
        <% end %>
        Ses solutions ont <%= "toutes" if followings.size == 1 %> été <%= "principalement" if followings.size > num_correctors_to_show %> corrigées par
        <% if num_correctors_to_show > 1 %>
          <% (0..num_correctors_to_show-1).each do |i| %>
            <%= followings[i].user.linked_name %>&nbsp;(<%= ((followings[i].num_corrections * 100.0)/tot_num_corr).round() %>%)<%= ", " if i < num_correctors_to_show-2 %><%= " et " if i == num_correctors_to_show-2 %><%= "." if i == num_correctors_to_show-1 %>
          <% end %>
        <% else %>
          <%= followings[0].user.linked_name %>.
        <% end %>
      <% end %>
    <% end %>
  </div>
    
  <% if actualrating > 0 %>
    <div style="width:100%;">

    <!-- Endroit pour dessiner l'évolution -->
    <center>
    <div style="width:100%; max-width:900px; height:480px; position:relative; display:block;">
    <canvas id="myCanvas" width="900" height="480" style="position:absolute; left:0px; top:0px;">
    Votre navigateur ne supporte pas les canvas.
    </canvas>
    </div>
    </center>

    <!-- Script pour le graphique de l'évolution -->
    <% niveaux = Color.get_all %>

    <% i = 1 %>
    <% numerolevel = 0 %>

    <% niveaux.each do |n| %>
      <% if niveau.id == n.id %>
        <% numerolevel = i %>
      <% end %>
      <% i = i+1 %>
    <% end %>

    <% nombrelevel = i-1 %>

    <% maxi = 0 %>


    <% if numerolevel == nombrelevel %>
      <% maxi = 1.2*actualrating %>
    <% else %>
      <% maxi = 1.1*niveaux[numerolevel][:pt] %>
    <% end %>
    
    <script type="text/javascript">
    
      <% graph_int_times = Array.new %>
      <% graph_times = Array.new %>
      <% graph_points = Array.new %>
      <% actperday.each do |a| %>
        <% graph_int_times.push(a[:time].to_time.to_i) %>
        <% graph_points.push(a[:pt]) %>
        <% t = "" %>
        <% if parquoi == "jour" %>
          <% t = "#{'0' if a[:time].day < 10 }#{ a[:time].day }/#{ '0' if a[:time].month < 10 }#{ a[:time].month }/#{ '0' if (a[:time].year % 2000) < 10 }#{ (a[:time].year % 2000) }" %>
        <% elsif parquoi == "heure" %>
          <% t = write_hour_only(a[:time]) %>
        <% else %>
          <% t = write_hour(a[:time]) %>
        <% end %>
        <% graph_times.push(t) %>
      <% end %>
      
      function respondCanvas(){
        var graph_int_times = <%= ruby_to_javascript(graph_int_times) %>;
        var graph_times = <%= ruby_to_javascript_string(graph_times) %>;
        var graph_points = <%= ruby_to_javascript(graph_points) %>;
        var maxi = <%= maxi %>;
      
        // Check light or dark theme
        var is_dark = (document.documentElement.getAttribute('data-bs-theme') == 'dark');
    
        // Get the canvas & context
        var c = document.getElementById('myCanvas');
        var ctx = c.getContext('2d');
        var container = c.parentElement;
        
        var W = 900.0;
        var H = 480.0;
        
        c.setAttribute('width', container.offsetWidth); //max width
        c.setAttribute('height', H * container.offsetWidth / W); //max height

        container.style.height = H * container.offsetWidth / W + "px"

        // Draw content

        var pct = c.offsetWidth / W;
        var W_real = pct * W;
        var H_real = pct * H;
        var W_offset = 50;
        var H_offset = 5;
        var W_size = W_real - W_offset - 50;
        var H_size = H_real - H_offset - 20;
        var W_internal_offset = 3;
        var W_internal_size = W_size - W_internal_offset - 3


        // Affichage des niveaux avec couleurs
        ctx.font = "14px Arial";
        ctx.textAlign = 'right';
        <% i = 1 %>
        var prec = 1000;
        <% niveaux.each do |n| %>
          <% haut = [1 - (n.pt / maxi), 0].max %>
        
          // Points à gauche du graphique
          <% if i > 1 %>
            <% if haut > 0 %>
              if (H_size * <%= haut %> < prec - 15){
                ctx.fillStyle = (is_dark ? 'white' : 'black');
                ctx.fillText(<%= n.pt %>, W_offset - 6, H_offset + H_size * <%= haut %> + 5);
                prec = H_size * <%= haut %>;
              }
            <% end %>
          <% end %>
          
          // Affichage du rectangle
          <% if haut > 0 %>
            ctx.beginPath();
            ctx.rect(W_offset, H_offset, W_size, H_size * <%= haut %>);
            ctx.fillStyle = (is_dark ? '<%= n.dark_color %>' : '<%= n.color %>');
            ctx.fill();
          <% end %>
          <% i = i+1 %>
        <% end %>


        // On trace maintenant le graphique

        var last = graph_int_times[0];
        var first = graph_int_times[graph_int_times.length - 1];
        
        // Commencement du graphique
        <% if parquoi == "jour" %>
          first = first - 86400;
        <% elsif parquoi == "heure" %>
          first = first - 3600;
        <% else %>
          first = first - 60;
        <% end %>

        var previousw = 2 * W_size;
        
        ctx.font = "12px Arial";
        ctx.fillStyle = (is_dark ? 'white' : 'black');
        ctx.textAlign = 'center';
        ctx.setLineDash([10, 10]);
        ctx.beginPath();
        ctx.lineWidth = 1;
        ctx.strokeStyle = (is_dark ? 'white' : 'black');

        // De droite vers la gauche : calcul où on met les verticales pointillées
        for (let j = 0; j < graph_int_times.length; j++) {
          var w = W_internal_offset + W_internal_size * (graph_int_times[j] - first) / (last - first);

          if (previousw - w > 55) {
            ctx.fillText(graph_times[j], W_offset + w, H_offset + H_size + 15);
            ctx.moveTo(W_offset + w, H_offset);
            ctx.lineTo(W_offset + w, H_offset + H_size);
            previousw = w;
          }
        }
        
        ctx.stroke();
        ctx.setLineDash([]);
        
        var w = W_internal_offset;
        var r = 0;
        var previousr = r;
        var h = H_size;

        ctx.beginPath();
        ctx.lineWidth = 2.5;
        ctx.fillStyle = (is_dark ? 'black' : 'white');
        ctx.strokeStyle = (is_dark ? 'black' : 'white');
        ctx.moveTo(W_offset + w, H_offset + h);

        // De gauche vers la droite : on trace le graphe
        for (let j = graph_int_times.length - 1; j >= 0; j--) {
          w = W_internal_offset + W_internal_size * (graph_int_times[j] - first) / (last - first);
          r = previousr + graph_points[j];
          previousr = r;
          h = H_size - H_size * (r / maxi);
          ctx.lineTo(W_offset + w, H_offset + h);
        }
        
        ctx.stroke();
        
        w = W_internal_offset;
        r = 0;
        previousr = r;
        h = H_size;
        
        // De gauche vers la droite : on met les points
        for (let j = graph_int_times.length - 1; j >= 0; j--) {
          w = W_internal_offset + W_internal_size * (graph_int_times[j] - first) / (last - first);
          r = previousr + graph_points[j];
          previousr = r;
          h = H_size - H_size * (r / maxi);
          ctx.beginPath(); 
          ctx.arc(W_offset + w, H_offset + h, 3, 0, 2 * Math.PI, true);
          ctx.fill();
        }
        
        // Contour du canvas
        ctx.beginPath();
        ctx.rect(W_offset, H_offset, W_size, H_size);
        ctx.lineWidth = 2;
        ctx.strokeStyle = (is_dark ? 'white' : 'black');
        ctx.stroke();
      }

      window.addEventListener("resize", () => {
        respondCanvas();
      });
      
      window.addEventListener("theme-change", () => {
        respondCanvas();
      });
      
      respondCanvas();
    </script>

    </div>
  <% end %>
  </div>
<% end %>

<% nb_corrections = @user.followings.where(:kind => [:first_corrector, :other_corrector]).count %>
<% if nb_corrections > 0 %>
  <div class="g-col-12 basic_container p-1">
    <div class="container_title">Corrections</div>
    <div class="pe-2 pb-2" style="padding-left:20px;"><%= @user.name %> a participé à la correction de <span class="fw-bold <%= @user.color_class %>"><%= write_readable_big_number(nb_corrections) %></span> soumission<%= "s" if nb_corrections > 1 %> sur le site.
    
    <% show_puzzle = signed_in? && Puzzle.started_or_root(current_user) && (!Rails.env.production? || @user.id == 38) %>
    
    <% if (@user.admin? || @user.corrector?) && @user.correction_level > 0 %>
      <%= "Il" if @user.sex == 0 %><%= "Elle" if @user.sex == 1 %> est Chevalier de rang
      <% if show_puzzle %>
        <a href="javascript:changeGraph()" class="fw-bold <%= @user.color_class %>"><%= @user.correction_level %></a>
      <% else %>
        <span class="fw-bold <%= @user.color_class %>"><%= @user.correction_level %></span>
      <% end %>
      de l'Ordre de Mathraining.
    <% end %>
    
    Merci à <%= "lui" if @user.sex == 0 %><%= "elle" if @user.sex == 1 %> !
    </div>
    
    <% if signed_in? %>
    <div style="width:100%;">
    <% Groupdate.time_zone = false unless Rails.env.production? %>
    <% count_by_month_str = @user.followings.where(:kind => [:first_corrector, :other_corrector]).group_by_month(:created_at).count %>
    <% if count_by_month_str.size >= 2 %>
      <% count_by_month_int = {} %>
      <% num_from_2024 = 0 %>
      <% count_by_month_str.each { |k, v| d = k.to_datetime; count_by_month_int[12*d.year + d.mon-1] = v; num_from_2024 += v if d.year >= 2024 } %>
      <% if show_puzzle && Rails.env.development? %>
        <% count_by_month_int[12*2024+8-1 + 103] = 1 %>
      <% end %>
      <% first_month = count_by_month_int.first[0] %>
      <% last_month = count_by_month_int.first[0] %>
      <% max_num_corr = 0 %>
      <% count_by_month_int.each { |k, v| first_month = [first_month, k].min; last_month = [last_month, k].max; max_num_corr = [max_num_corr, v].max} %>
      <% num_months = last_month - first_month + 1 %>
      <% num_corr_by_month = Array.new(num_months, 0) %>
      <% count_by_month_int.each { |k, v| num_corr_by_month[k-first_month] = v } %>
      <% months = Array.new(num_months, 0) %>
      <% for i in (first_month..last_month) do %>
        <% month = (i % 12 + 1) %>
        <% year = (i - month + 1)/12 %>
        <% months[i-first_month] = "#{0 if month < 10}#{month}/#{year-2000}" %>
      <% end %>
      
      <% if show_puzzle %>
        <% text = "COMBIEN CORENTIN A T IL CORRIGE DE SOUMISSIONS DE 2016 A 2023 S IL EN A CORRIGE " + num_from_2024.to_s + " DEPUIS JANVIER 2024" %>
        <% max_num_corr_fake = 0 %>
        <% num_corr_by_month_fake = Array.new(num_months, 0) %>
        <% (0..(text.size-1)).each do |i| %>
          <% if i > num_months %>
            <% break %>
          <% end %>
          <% c = text[i] %>
          <% if c.ord >= 'A'.ord && c.ord <= 'Z'.ord %>
            <% num_corr_by_month_fake[i] = c.ord - 'A'.ord + 1 %>
          <% elsif c.ord >= '0'.ord && c.ord <= '9'.ord %>
            <% num_corr_by_month_fake[i] = c.ord - '0'.ord %>
          <% end %>
          <% max_num_corr_fake = [max_num_corr_fake, num_corr_by_month_fake[i]].max %>
        <% end %>
      <% end %>
      
      <center>
      <!-- Endroit pour dessiner le graphique des corrections -->
      <div style="width:100%; max-width:900px; height:480px; position:relative; display:block;">
      <canvas id="myCanvasCorr" width="900" height="480" style="position:absolute; left:0px; top:0px;">
      Votre navigateur ne supporte pas les canvas.
      </canvas>
      </div>
      </center>

      <script type="text/javascript">   
        <% if show_puzzle %>
        var change_graph = false; 
        <% end %> 
        
        function respondCanvasCorr(){
          var months = <%= ruby_to_javascript_string(months) %>;
          var num_corr_by_month = <%= ruby_to_javascript(num_corr_by_month) %>;
          var num_months = <%= num_months %>;
          var max_num_corr = <%= max_num_corr %>;
          <% if show_puzzle %>
          if (change_graph) {
            num_corr_by_month = <%= ruby_to_javascript(num_corr_by_month_fake) %>;
            max_num_corr = <%= max_num_corr_fake %>;
          }
          <% end %>
          var maxi = Math.ceil(max_num_corr * 1.1);
        
          // Check light or dark theme
          var is_dark = (document.documentElement.getAttribute('data-bs-theme') == 'dark');
    
          // Get the canvas & context
          var c = document.getElementById('myCanvasCorr');
          var ctx = c.getContext('2d');
          var container = c.parentElement;
          
          var W = 900.0;
          var H = 480.0;
          
          c.setAttribute('width', container.offsetWidth); //max width
          c.setAttribute('height', H * container.offsetWidth / W); //max height

          container.style.height = H * container.offsetWidth / W + "px"

          // Draw content

          var pct = c.offsetWidth / W;
          var W_real = pct * W;
          var H_real = pct * H;
          var W_offset = 50;
          var H_offset = 5;
          var W_size = W_real - W_offset - 50;
          var H_size = H_real - H_offset - 20;


          ctx.beginPath();
          ctx.rect(W_offset, H_offset, W_size, H_size);
          ctx.fillStyle = (is_dark ? 'rgb(33, 37, 41)' : 'white');
          ctx.fill();
          ctx.lineWidth = 1;
          ctx.strokeStyle = (is_dark ? 'white' : 'black');
          ctx.stroke();
          
          var rect_width = W_size / num_months;
          
          ctx.beginPath();
          ctx.fillStyle = (is_dark ? '<%= user_color_dark %>' : '<%= user_color_light %>');
          for (let i = 0; i < num_months; i++) {
            ctx.rect(W_offset + i * rect_width, H_offset + H_size, rect_width, - H_size * num_corr_by_month[i] / maxi);
          }
          ctx.fill();
          ctx.stroke();
          
          ctx.font = "12px Arial";
          ctx.fillStyle = (is_dark ? 'white' : 'black');
          ctx.textAlign = 'center';
          
          ctx.beginPath();
          var last_date_x = -100;
          for (let i = 0; i < num_months; i++) {
            var date_x = W_offset + (i + 0.5) * rect_width;
            if (date_x > last_date_x + 55) {
              ctx.moveTo(date_x, H_offset + H_size);
              ctx.lineTo(date_x, H_offset + H_size + 2);
              ctx.fillText(months[i], date_x, H_offset + H_size + 15);
              last_date_x = date_x;
            }
          }
          ctx.stroke();
          
          ctx.textAlign = 'right';
          <% step = max_num_corr / 10 %>
          <% fac = 1 %>
          <% while step >= 10 %>
            <% fac = fac * 10 %>
            <% step = step / 10 %>
          <% end %>
          <% if step < 1 %>
            <% step = 1 %>
          <% elsif step < 2 %>
            <% step = 2 %>
          <% elsif step < 5 %>
            <% step = 5 %>
          <% else %>
            <% step = 10 %>
          <% end %>
          <% step = step * fac %>
          var i = max_num_corr;
          var step = <%= step %>;
          <% if show_puzzle %>
          if (change_graph) {
            step = 5;
          }
          <% end %>
          var lasth = - H_size;
          ctx.beginPath();
          while (i > 0) {
            var h = H_size - H_size * i / maxi;
            if (h > lasth + 15) {
              ctx.fillText(i.toString(), W_offset - 7, H_offset + h + 4);
              ctx.moveTo(W_offset, H_offset + h);
              ctx.lineTo(W_offset - 2, H_offset + h);
              lasth = h;
            }
            i = i - step;
            mod = i % step;
            if (mod != 0) {
              i = i + step - mod
              if (mod < step * 0.2) {
                i = i - step;
              }
            }
          }
          ctx.stroke();       
        }

        window.addEventListener("resize", () => {
          respondCanvasCorr();
        });
        
        window.addEventListener("theme-change", () => {
          respondCanvasCorr();
        });
        
        respondCanvasCorr();
        
        <% if show_puzzle %>
        function changeGraph() {
          change_graph = !change_graph;
          respondCanvasCorr();
        }
        <% end %>
      </script>
    <% end %>
    
    </div>
    <% end %>
  </div>
<% end %>


<!-- Si administrateur, différentes options -->
<% if signed_in? && current_user.admin? && !@user.root? && (current_user.root? || !@user.admin?) %>
  <div class="g-col-12 basic_container text-center p-2">
    <% i = 0 %>
    <% if current_user.root? && @user.email_confirm && !@user.admin? %>
      <%= " | " if i > 0 %>
      <% i += 1 %>
      <%= link_to "Voir le site comme lui", take_skin_user_path(@user), data: { confirm: "Vous allez voir tout le site comme #{@user.name} le voit." }, :method => :put %>
    <% end %>
    <% if current_user.root? && !@user.admin? %>
      <%= " | " if i > 0 %>
      <% i += 1 %>
      <%= link_to "Rendre administrateur", set_administrator_user_path(@user), data: { confirm: "Êtes-vous #{current_user.sure} de vouloir rendre #{@user.name} administrateur ? Vous ne pourrez plus revenir en arrière !"}, :method => :put, :class => "text-color-red" %>
    <% end %>
    <% if current_user.root? && !@user.admin? %>
      <%= " | " if i > 0 %>
      <% i += 1 %>
      <% if !@user.corrector? %>
        <%= link_to "Rendre correcteur", set_corrector_user_path(@user), data: { confirm: "Êtes-vous #{current_user.sure} de vouloir rendre #{@user.name} correcteur ?"}, :method => :put, :class => "text-color-red" %>
      <% else %>
        <%= link_to "Retirer des correcteurs", unset_corrector_user_path(@user), data: { confirm: "Êtes-vous #{current_user.sure} de vouloir retirer #{@user.name} des correcteurs ?"}, :method => :put, :class => "text-color-red" %>
      <% end %>
    <% end %>
    <% if current_user.admin? && !@user.admin? %>
      <%= " | " if i > 0 %>
      <% i += 1 %>
      <% if @user.wepion? %>
        <%= link_to "Retirer du groupe Wépion", unset_wepion_user_path(@user), :method => :put %>
      <% else %>
        <%= link_to "Ajouter au groupe Wépion", set_wepion_user_path(@user), :method => :put %>
      <% end %>
    <% end %>
    <% if current_user.admin? && @user.wepion? %>
      <%= " | " if i > 0 %>
      <% i += 1 %>
      Groupe <%= link_to "A", change_group_user_path(@user, :group => "A"), :method => :put %>, <%= link_to "B", change_group_user_path(@user, :group => "B"), :method => :put %>, <%= link_to "aucun", change_group_user_path(@user, :group => ""), :method => :put %>
    <% end %>
  </div>
<% end %>

<!-- Si root, différentes options -->
<% if signed_in? && !@user.root? && current_user.root? %>
  <div class="g-col-12 basic_container text-center p-2">
    <%= link_to "Supprimer les données personnelles", destroydata_user_path(@user), data: { confirm: "ATTENTION : Cette action va supprimer les données personnelles de #{@user.name}, à savoir son adresse e-mail et son nom. Êtes-vous #{current_user.sure} de vouloir continuer ?" }, :method => :put, :class => "text-color-red" %>
    |
    <%= link_to "Supprimer", @user, method: :delete, data: { confirm: "ATTENTION : Privilégiez la suppression des données personnelles ! En continuant, vous supprimerez toutes les données relatives à ce compte. Êtes-vous #{current_user.sure} de vouloir supprimer #{@user.name} ?" }, :class => "text-color-red" %>
    |
    <% if @user.can_change_name %>
      <%= link_to "Interdire le changement de nom", unset_can_change_name_user_path(@user), :method => :put %>
    <% else %>
      <%= link_to "Autoriser le changement de nom", set_can_change_name_user_path(@user), :method => :put %>
    <% end %>
    |
    <%= link_to "Sanctionner", user_sanctions_path(@user) %>
  </div>
<% end %>

<!-- Si développement : fast sign in to this user -->
<% if Rails.env.development? %>
  <div class="g-col-12 basic_container text-center p-2">
    <%= link_to "Se connecter avec ce compte", fast_sign_in_path(:id => @user.id) %>
  </div>
<% end %>


</div>
<!-- END OF THE MAIN DIV -->

<!-- Script to replace mt_light class by mt_dark class (or vice versa) when theme changes -->
<!-- NB: Instead of using mt_light and mt_dark classes as we do today, another option would be to have only one class and
     to change its definition using [data-bs-theme=light] and [data-bs-theme=dark] as usual. Unfortunately, that approach
     does not work on Safari where the [data-...] tags look unsupported when declared inside the html file like here -->
<script type="text/javascript">
  window.addEventListener("theme-change", () => {
    var theme = document.documentElement.getAttribute('data-bs-theme');
    var old_theme = (theme == 'light' ? 'dark' : 'light');
    var els = document.getElementsByClassName("mt_" + old_theme); /* this is live and gets updated when changing classes below! */
    while (els.length > 0) {
      els[0].classList.add("mt_" + theme);
      els[0].classList.remove("mt_" + old_theme);
    }
  });
</script>
