<% provide(:title, 'Corrections') %>

<h1><%= title_1("Corrections") %></h1>

Le graphique suivant montre, en <span style="color:green;">vert</span>, les soumissions correctes, en <span style="color:red;">rouge</span> les soumissions incorrectes, et en <span style="color:grey;">gris</span> les soumissions en attente de correction.<br/><br/>

<!-- On parcourt tous les correcteurs -->

<% numbercorrect = Array.new %>
<% numberincorrect = Array.new %>
<% numberdontknow = Array.new %>

<% for i in (0..30) do %>
  <% numbercorrect[i] = 0 %>
  <% numberincorrect[i] = 0 %>
  <% numberdontknow[i] = 0 %>
<% end %>

<% today = DateTime.now.in_time_zone.to_date %>
<% twoweeksago = today - 14 %>
<% amonthago = today - 32 %>

<% Groupdate.time_zone = false unless Rails.env.production? %>
<% allsub = Submission.where("created_at > ? AND visible = ?", amonthago, true).group(:status).group_by_day(:created_at).count %>

<% allsub.each do |x, n| %>
  <% status = x.first %>
  <% date = Rails.env.production? ? x.second.in_time_zone.to_date : x.second.to_date %>
  <% diff = (today - date).to_i %>
  <% if diff < 31 %>
    <% if status == "waiting" %>
      <% numberdontknow[diff] = numberdontknow[diff] + n %>
    <% elsif status == "correct" %>
      <% numbercorrect[diff] = numbercorrect[diff] + n %>
    <% else %>
      <% numberincorrect[diff] = numberincorrect[diff] + n %>
    <% end %>
  <% end %>
<% end %>

<% maxi = 0 %>
<% for i in (0..30) do %>
  <% if numbercorrect[i] + numberincorrect[i] + numberdontknow[i] > maxi %>
    <% maxi = numbercorrect[i] + numberincorrect[i] + numberdontknow[i] %>
  <% end %>
<% end %>

<% maxi = maxi + 1 %>

<center>

<!-- Endroit pour dessiner le graphique des corrections -->
<div id="contenant" style="width:100%; max-width:900px; height:480px; position:relative; display:block;">
<canvas id="myCanvas" width="900" height="480" style="position:absolute; left:0px; top: 0px;">
Votre navigateur ne supporte pas les canvas.
</canvas>
</div>

</center>


<script type="text/javascript">
  $(document).ready( function(){

  //Get the canvas & context
  var c = $('#myCanvas');
  var ctx = c.get(0).getContext('2d');
  var container = $(c).parent();

  //Run function when browser  resize
  $(window).resize( respondCanvas );

  function respondCanvas(){
  c.attr('width', $(container).width() ); //max width
  c.attr('height', 480*$(container).width()/900.0); //max height

  document.getElementById('contenant').style.height = 480*$(container).width()/900.0 + "px"

  //Redraw & reposition content
  var x = c.width();
  var y = c.height();

  var pct = c.width()/900.0;
  
  ctx.beginPath();
  ctx.rect(pct*50, pct*5, pct*806, pct*450);
  ctx.fillStyle = 'white';
  ctx.fill();
  ctx.lineWidth = 1;
  ctx.strokeStyle = 'black';
  ctx.stroke();
  
  // Entre 50 et 856 --> largeur totale 806, à diviser en 31 : 26 pixel par rectangle
  
  <% for i in (0..30) do %>
    ctx.beginPath();
    <% size = (430*numbercorrect[30-i])/maxi %>
    ctx.rect(pct*<%= 50+26*i %>, pct*455, pct*26, -pct*<%= size %>);
    ctx.fillStyle = 'green';
    ctx.fill();
    ctx.lineWidth = 1;
    ctx.strokeStyle = 'black';
    ctx.stroke();
    
    <% avant = size %>
    
    ctx.beginPath();
    <% size = (430*numberincorrect[30-i])/maxi %>
    ctx.rect(pct*<%= 50+26*i %>, pct*<%= 455 - avant %>, pct*26, -pct*<%= size %>);
    ctx.fillStyle = 'red';
    ctx.fill();
    ctx.lineWidth = 1;
    ctx.strokeStyle = 'black';
    ctx.stroke();
    
    <% avant = avant + size %>
    
    ctx.beginPath();
    <% size = (430*numberdontknow[30-i])/maxi %>
    ctx.rect(pct*<%= 50+26*i %>, pct*<%= 455 - avant %>, pct*26, -pct*<%= size %>);
    ctx.fillStyle = 'grey';
    ctx.fill();
    ctx.lineWidth = 1;
    ctx.strokeStyle = 'black';
    ctx.stroke();
  <% end %>
  
  ctx.font="12px Arial";
  ctx.fillStyle = 'black';
  ctx.textAlign = 'center';
  
  if (pct > 0.7){
  ctx.fillText("aujourd'hui",pct*(856-13),pct*471);
  ctx.fillText("il y a 10 jours",pct*(856-13-10*26),pct*471);
  ctx.fillText("il y a 20 jours",pct*(856-13-20*26),pct*471);
  ctx.fillText("il y a 30 jours",pct*(856-13-30*26),pct*471);
  }
  
  ctx.textAlign = 'right';
  <% i = maxi - 1 %>
  <% while(i > 0) %>
    ctx.fillText("<%= i %>", pct*43,pct*(<%= 455-430*i/maxi %>+4));
    <% i = i - 10 %>
  <% end %>
  
  }

  //Initial call
  respondCanvas();

  });
</script>


<h2>Dernières corrections</h2>

Pour chaque section et chaque niveau, le tableau ci-dessous donne le dernier correcteur ayant corrigé une soumission à un problème de ce type.

<div style="width:100%; overflow-x:auto; margin-top:20px;">
<center>
<table class="table table-bordered" style="min-width:790px; width:790px; margin:0px;">
<tr>
<th style="width:70px;"></th>
<% sections = Section.select(:id, :abbreviation).where(:fondation => false).order(:id).to_a %>
<% sections.each do |sec| %>
  <th style="width:120px; text-align:center;"><%= sec.abbreviation %></th>
<% end %>
</tr>

<% last_following_user_by_level_and_section = Array.new %>
<% (1..5).each do |lev| %>
  <% last_following_user_by_level_and_section[lev] = Array.new %>
<% end %>

<!-- Load last 100 followings to have less than 30 sql requests -->
<!-- It is possible to do everything with only one request but it actually looks slower: -->
<!-- User.find_by_sql("SELECT users.*, problems.level AS problem_level, problems.section_id FROM followings f1 INNER JOIN submissions ON f1.submission_id = submissions.id INNER JOIN problems ON submissions.problem_id = problems.id INNER JOIN users ON users.id = f1.user_id JOIN (SELECT problems.level AS problem_level, problems.section_id, MAX(f2.created_at) AS max_created_at FROM followings f2 INNER JOIN submissions ON f2.submission_id = submissions.id INNER JOIN problems ON submissions.problem_id = problems.id GROUP BY problems.level, problems.section_id) f ON f.problem_level = problems.level AND f.section_id = problems.section_id AND f.max_created_at = f1.created_at").each do |u| -->
  <!-- last_following_user_by_level_and_section[u.problem_level][u.section_id] = u -->
<!-- end -->
<% num_preload = 100 %>
<% recent_followings = Following.joins(submission: :problem).select("followings.user_id, problems.level, problems.section_id").where(:kind => 1).includes(:user).order("followings.created_at DESC").limit(num_preload) %>
<% recent_followings.each do |f| %>
  <% if last_following_user_by_level_and_section[f.level][f.section_id].nil? %>
    <% last_following_user_by_level_and_section[f.level][f.section_id] = f.user %>
  <% end %>
<% end %>
<% need_reload = (recent_followings.size == num_preload) %>

<% (1..5).each do |lev| %>
  <tr>
  <th style="text-align:center;">Niv. <%= lev %></th>
  <% sections.each do |sec| %>
    <td style="text-align:center; background-color:rgb(250, 250, 250);">
      <% u = nil %>
      <% if !last_following_user_by_level_and_section[lev][sec.id].nil? %>
        <% u = last_following_user_by_level_and_section[lev][sec.id] %>
      <% elsif need_reload %>
        <% f = Following.joins(submission: :problem).where(problems: {level: lev, section_id: sec.id}, kind: 1).order("created_at").last %>
        <% if !f.nil? %>
          <% u = f.user %>
        <% end %>
      <% end %>
      <% if u.nil? %>
        -
      <% else %>
        <%= raw(u.linked_name(2)) %>
      <% end %>
    </td>
  <% end %>
  </tr>
<% end %>

</table>
</center>
</div>


<h2>Correcteurs</h2>

Le tableau suivant reprend la liste de tous les correcteurs de Mathraining. Un grand merci à eux tous !

<% nb_recent_by_user = Following.where("created_at >= '#{twoweeksago}' AND kind > 0").group(:user_id).count %>

<% correctors = [] %>
<% Following.select("followings.user_id, COUNT(followings.id) AS nb_corrections, MIN(followings.created_at) AS first_correction, MAX(followings.created_at) AS last_correction").where("kind > 0").group(:user_id).includes(:user).each do |f| %>
  <% correctors.push({:nb_corrections => f.nb_corrections, :nb_recent => (nb_recent_by_user[f.user_id].nil? ? 0 : nb_recent_by_user[f.user_id]), :first_correction => f.first_correction, :last_correction => f.last_correction, :user => f.user}) %>
<% end %>

<center>
<table class="table table-bordered" style="margin-top:20px; width:auto;">
<tr><th>Nom</th><th style="text-align:center;">Corrections</th><th style="text-align:center;">&le; 2 sem.</th><th class="hidden-xs">Première</th><th class="hidden-xs">Dernière</th></tr>

<% correctors.sort_by{|e| -e[:nb_corrections]}.each do |c| %>
  <% u = c[:user] %>
  <% if c[:nb_recent] > 140 %>
    <tr style="background-color:rgb(40,250,40)">
  <% else %>
    <tr style="background-color:rgb(<%= (250-c[:nb_recent]*1.5).round %>,250,<%= (250-c[:nb_recent]*1.5).round %>)">
  <% end %>
  <td><%= raw(u.linked_name) %></td>
  <td style="text-align:center;"><%= c[:nb_corrections] %></td>
  <td style="text-align:center;"><%= c[:nb_recent] %></td>
  <td class="hidden-xs"><%= write_date_only(c[:first_correction].in_time_zone) %></td>
  <td class="hidden-xs"><%= write_date_only(c[:last_correction].in_time_zone) %></td>
  </tr>
<% end %>
</table>
</center>
